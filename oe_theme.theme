<?php

/**
 * @file
 * Functions to support theming.
 */

declare(strict_types = 1);

use Drupal\Component\Utility\Html;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Render\Element;
use Drupal\Component\Utility\Random;
use Drupal\Core\Url;
use Drupal\oe_theme\ValueObject\FileValueObject;
use Drupal\oe_theme\ValueObject\DateValueObject;
use Drupal\oe_theme\ValueObject\GalleryItemValueObject;

/**
 * Implements hook_preprocess().
 */
function oe_theme_preprocess(&$variables) {
  global $base_url;
  $theme = \Drupal::theme()->getActiveTheme();
  $variables['ecl_images_path'] = $base_url . '/' . $theme->getPath() . '/dist/images';
  $variables['ecl_icon_path'] = $variables['ecl_images_path'] . '/icons/sprites/icons.svg';
  $variables['ecl_logo_path'] = $variables['ecl_images_path'] . '/logo';
  $variables['ecl_social_icon_path'] = $variables['ecl_images_path'] . '/social-icons/sprites/icons-social.svg';
}

/**
 * Implements hook_preprocess_breadcrumb().
 */
function oe_theme_preprocess_breadcrumb(array &$variables): void {
  $request     = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $title       = \Drupal::service('title_resolver')
    ->getTitle($request, $route_match->getRouteObject());

  unset($variables['links']);
  $variables['links'] = array_map(function ($item) {
    return [
      'path' => $item['url'],
      'label' => $item['text'],
    ];
  }, $variables['breadcrumb']);

  // Add the title to the segments only if it's not empty.
  if (!empty($title)) {
    $variables['links'][] = [
      'label' => $title,
    ];
  }

  $variables['navigation_text'] = '';
  $variables['ellipsis_label'] = '';
  $variables['icon_file_path'] = $variables['ecl_icon_path'];
}

/**
 * Implements hook_preprocess_menu__main().
 */
function oe_theme_preprocess_menu__main(array &$variables): void {
  // Massage data to be compliant with ECL navigation menu data structure.
  $variables['links'] = array_map(function ($item) {
    return [
      'href' => $item['url'],
      'label' => $item['title'],
      'is_active' => $item['in_active_trail'],
    ];
  }, $variables['items']);

  foreach ($variables['items'] as $name => $link) {
    $variables['links'][$name]['children_links'] = array_map(function ($item) {
      return [
        'links' => [[
          'href' => $item['url'],
          'label' => $item['title'],
          'is_active' => $item['in_active_trail'],
        ],
        ],
      ];
    }, $variables['items'][$name]['below']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Adds a bare, markup-free template suggestion to all paragraph fields.
 */
function oe_theme_theme_suggestions_field_alter(array &$suggestions, array $variables): void {
  // Do not output field labels and wrapping markup for paragraph fields.
  if (isset($variables['element']['#entity_type']) && $variables['element']['#entity_type'] === 'paragraph') {
    // Prepend the new suggestion to the list. This will put it right after the
    // default field template. By doing this we allow to override single
    // fields, while keeping all the rest markup-free.
    array_unshift($suggestions, 'field__bare');
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function oe_theme_theme_suggestions_paragraph_alter(array &$suggestions, array $variables): void {
  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  $paragraph = $variables['elements']['#paragraph'];

  if ($paragraph->bundle() === 'oe_content_row') {
    $variant = $paragraph->get('oe_paragraphs_variant')->first()->value;
    $suggestions[] = 'paragraph__' . $paragraph->bundle() . '__variant_' . $variant;
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function oe_theme_preprocess_paragraph__oe_links_block(array &$variables): void {
  // Massage data to be compliant with ECL links block component data structure.
  foreach (Element::children($variables['content']['field_oe_links']) as $index) {
    $variables['links'][] = [
      'label' => $variables['content']['field_oe_links'][$index]['#title'],
      'url' => $variables['content']['field_oe_links'][$index]['#url'],
    ];
  }
}

/**
 * Implements hook_preprocess_oe_corporate_blocks_footer().
 */
function oe_theme_preprocess_oe_corporate_blocks_footer(array &$variables): void {
  $corporate_footer = $variables['corporate_footer'];

  // Create the section for 'About EC'.
  $about_ec = $corporate_footer['about_ec'];
  $sections_about_ec = [
    'title' => $about_ec['title'],
    'links' => [],
  ];

  foreach ($about_ec['items'] as $item) {
    $sections_about_ec['links'][] = [
      'link' => [
        'label' => $item['label'],
        'path' => $item['href'],
        'icon_position' => 'after',
      ],
    ];
  }

  // Create the section for 'Social media'.
  $social_media = $corporate_footer['social_media'];
  $sections_social_media = [
    'title' => $social_media['title'],
    'links' => [],
  ];

  foreach ($social_media['items'] as $item) {
    if ($item['type'] == 'social-network') {
      $sections_social_media['links'][] = [
        'link' => [
          'label' => $item['link']['label'],
          'path' => $item['link']['href'],
          'icon_position' => 'before',
        ],
        'icon' => [
          'path' => $variables['ecl_icon_path'],
          'type' => 'branded',
          'name' => $item['icon'],
        ],
      ];
    }
    else {
      $sections_social_media['links'][] = [
        'link' => [
          'label' => $item['link']['label'],
          'path' => $item['link']['href'],
          'icon_position' => 'after',
        ],
        'icon' => [
          'path' => $variables['ecl_icon_path'],
          'type' => 'ui',
          'name' => 'external',
        ],
      ];
    }
  }

  // Create the section for 'About EU'.
  $about_eu = $corporate_footer['about_eu'];
  $sections_about_eu = [
    'title' => $about_eu['title'],
    'links' => [],
  ];

  foreach ($about_eu['items'] as $item) {
    $sections_about_eu['links'][] = [
      'link' => [
        'label' => $item['label'],
        'path' => $item['href'],
        'icon_position' => 'after',
      ],
      'icon' => [
        'path' => $variables['ecl_icon_path'],
        'type' => 'ui',
        'name' => 'external',
      ],
    ];
  }

  $variables['corporate_footer']['sections'] = [
    $sections_about_ec,
    $sections_social_media,
    $sections_about_eu,
  ];

  // Create the list of bottom link.
  foreach ($corporate_footer['bottom_links'] as $item) {
    $variables['corporate_footer']['common'][] = [
      'link' => [
        'label' => $item['label'],
        'path' => $item['href'],
      ],
    ];
  }
}

/**
 * Implements hook_preprocess_paragraph__oe_accordion().
 */
function oe_theme_preprocess_paragraph__oe_accordion(array &$variables): void {
  // Massage data to be compliant with ECL Accordion2 component data structure.
  $builder = \Drupal::entityTypeManager()->getViewBuilder('paragraph');
  $variables['identifier'] = 'paragraph-' . $variables['paragraph']->id();
  $variables['items'] = [];

  /** @var \Drupal\entity_reference_revisions\Plugin\Field\FieldType\EntityReferenceRevisionsItem $field_item */
  foreach ($variables['paragraph']->get('field_oe_paragraphs') as $field_item) {
    $paragraph = $field_item->entity;
    $variables['items'][] = [
      'title' => $builder->viewField($paragraph->get('field_oe_text')),
      'body' => $builder->viewField($paragraph->get('field_oe_text_long')),
    ];
  }
}

/**
 * Implements hook_preprocess_paragraph__oe_contextual_navigation().
 */
function oe_theme_preprocess_paragraph__oe_contextual_navigation(array &$variables): void {
  // Massage data to be compliant with ECL 'context_nav' pattern data structure.
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  $variables['limit'] = $paragraph->get('field_oe_limit')->value;
  $variables['more_label'] = $paragraph->get('field_oe_text')->value;

  $variables['items'] = [];
  foreach (Element::children($variables['content']['field_oe_links']) as $index) {
    $variables['items'][] = [
      'label' => $variables['content']['field_oe_links'][$index]['#title'],
      'href' => $variables['content']['field_oe_links'][$index]['#url'],
    ];
  }
}

/**
 * Implements hook_preprocess_menu_local_tasks().
 */
function oe_theme_preprocess_menu_local_tasks(array &$variables): void {
  foreach ($variables['primary'] as $link) {
    /** @var Drupal\Core\Url $url */
    $url = $link['#link']['url'];
    if ($url->access($variables['user'])) {
      $variables['primary_links'][] = [
        'href' => $url,
        'label' => $link['#link']['title'],
        'is_active' => $link['#active'],
      ];
    }
  }

  foreach ($variables['secondary'] as $link) {
    /** @var Drupal\Core\Url $url */
    $url = $link['#link']['url'];
    if ($url->access($variables['user'])) {
      $variables['secondary_links'][] = [
        'href' => $url,
        'label' => $link['#link']['title'],
        'is_active' => $link['#active'],
      ];
    }
  }
}

/**
 * Implements hook_preprocess_input__radio().
 */
function oe_theme_preprocess_input__radio(array &$variables): void {
  _oe_theme_preprocess_input_label_wrapper($variables);
}

/**
 * Implements hook_preprocess_input__checkbox().
 */
function oe_theme_preprocess_input__checkbox(array &$variables): void {
  _oe_theme_preprocess_input_label_wrapper($variables);
}

/**
 * Helper function to additionally preprocess checkbox and radio elements.
 *
 * Moves the label element to the input template and creates some helper
 * variables to be used with the ECL templates.
 *
 * @param array $variables
 *   Set of available variables.
 */
function _oe_theme_preprocess_input_label_wrapper(array &$variables): void {
  $element = &$variables['element'];

  if (isset($element['#title']) && $element['#title'] !== '') {
    $variables['title'] = ['#markup' => $element['#title']];
  }

  // Generate the extra attributes array from the general attributes.
  $extra_attributes = !empty($variables['attributes']) ? $variables['attributes'] : [];
  $predefined_attributes = [
    'id' => 'id',
    'name' => 'name',
    'value' => 'value',
    'disabled' => 'disabled',
  ];
  $extra_attributes = array_diff_key($extra_attributes, $predefined_attributes);
  foreach ($extra_attributes as $key => $value) {
    if (is_string($value)) {
      $variables['input_attributes'][] = [
        'name' => $key,
        'value' => $value,
      ];
    }
  }
}

/**
 * Implements hook_preprocess_radios().
 */
function oe_theme_preprocess_radios(array &$variables): void {
  $element = &$variables['element'];
  $variables['invalid'] = !empty($element['#errors']);

  if (isset($element['#title']) && $element['#title'] !== '') {
    $variables['label'] = ['#markup' => $element['#title']];
  }
}

/**
 * Implements hook_preprocess_fieldset().
 */
function oe_theme_preprocess_fieldset(array &$variables): void {
  if ($variables['element']['#type'] == 'radios') {
    $variables['legend_display'] = FALSE;
  }
}

/**
 * Implements hook_preprocess_form_element().
 *
 * Disables displaying of the label for checkbox and radio elements, as the
 * label is already rendered in the input template.
 */
function oe_theme_preprocess_form_element(array &$variables): void {
  if (in_array($variables['element']['#type'], ['checkbox', 'radio'])) {
    $variables['label_display'] = 'none';
  }
  $ecl_type_mappings = [
    'textfield' => 'text-input',
    'password' => 'text-input',
    'textarea' => 'text-area',
    'select' => 'select',
  ];
  if (isset($ecl_type_mappings[$variables['element']['#type']])) {
    $variables['ecl_type'] = $ecl_type_mappings[$variables['element']['#type']];
  }
}

/**
 * Implements hook_preprocess_field().
 *
 * Add paragraph formatting to body.
 */
function oe_theme_preprocess_field(&$variables, $hook): void {
  if ($variables['field_name'] === 'body') {
    $variables['attributes']['class'][] = 'ecl-editor';
  }

  // Add the ECL image class to the image fields.
  $field_name = $variables['field_name'];
  if (in_array($field_name, ['oe_media_avportal_photo'])) {
    foreach ($variables['items'] as &$item) {
      $item['content']['#attributes']['class'][] = 'ecl-image';
      $item['content']['#attributes']['class'][] = 'ecl-image--fluid';
    }
  }

  if ($variables['field_name'] === 'oe_related_links') {
    foreach ($variables['items'] as $delta => $item) {
      $variables['items'][$delta]['content'] = [
        '#type' => 'pattern',
        '#id' => 'list_item',
        '#variant' => 'default',
        '#fields' => [
          'url' => $item['content']['#url'],
          'title' => $item['content']['#title'],
        ],
      ];
    }
  }
}

/**
 * Implements hook_preprocess_pager().
 *
 * @see template_preprocess_pager()
 *
 * Overwrites the default Drupal pager in order to adapt to the ECL style
 * guide pager component requirements.
 * Most of the bare-bones are copy-pasted from the Drupal implementation.
 */
function oe_theme_preprocess_pager(array &$variables): void {
  // Get the tags for the first, previous, next and last links.
  $tags = $variables['pager']['#tags'];

  $variables['ecl_items'] = [];

  // Generate fist link if it is available.
  if (!empty($variables['items']['first']['href'])) {
    $first_link = [];
    $first_link['type'] = 'first';
    $first_link['aria_label'] = t('Go to first page');
    $label = t('‹‹ First');
    if (isset($tags[0])) {
      $label = $tags[0];
    }
    $first_link['link']['link'] = [
      'path' => $variables['items']['first']['href'],
      'label' => $label,
    ];
    $variables['ecl_items'][] = $first_link;
  }

  // Generate previous link if it is available.
  if (!empty($variables['items']['previous']['href'])) {
    $previous_link = [];
    $previous_link['type'] = 'previous';
    $previous_link['aria_label'] = t('Go to previous page');
    $label = t('‹ Previous');
    if (isset($tags[1])) {
      $label = $tags[1];
    }
    $previous_link['link']['link'] = [
      'path' => $variables['items']['previous']['href'],
      'label' => $label,
    ];
    $variables['ecl_items'][] = $previous_link;
  }

  // Generate previous ellipses if needed.
  if (isset($variables['ellipses']['previous']) && $variables['ellipses']['previous']) {
    $ellipsis = [
      'type' => 'ellipsis',
      'label' => '...',
    ];
    $variables['ecl_items'][] = $ellipsis;
  }

  // Generate actual pager items.
  if (!empty($variables['items']['pages'])) {
    foreach ($variables['items']['pages'] as $page_key => $page_item) {
      if ($page_key == $variables['current']) {
        $current_link = [
          'type' => 'current',
          'aria_label' => t('Page @number', ['@number' => $page_key]),
          'label' => (string) $page_key,
        ];
        $variables['ecl_items'][] = $current_link;
        continue;
      }
      $link = [];
      $link['aria_label'] = t('Go to page @number', ['@number' => $page_key]);
      $link['link']['link'] = [
        'path' => $page_item['href'],
        'label' => (string) $page_key,
      ];
      $variables['ecl_items'][] = $link;
    }
  }

  // Generate next ellipses if needed.
  if (isset($variables['ellipses']['next']) && $variables['ellipses']['next']) {
    $ellipsis = [
      'type' => 'ellipsis',
      'label' => '...',
    ];
    $variables['ecl_items'][] = $ellipsis;
  }

  // Generate next link if it is available.
  if (!empty($variables['items']['next']['href'])) {
    $first_link = [];
    $first_link['type'] = 'next';
    $first_link['aria_label'] = t('Go to next page');
    $label = t('Next ›');
    if (isset($tags[3])) {
      $label = $tags[3];
    }
    $first_link['link']['link'] = [
      'path' => $variables['items']['next']['href'],
      'label' => $label,
    ];
    $variables['ecl_items'][] = $first_link;
  }

  // Generate previous link if it is available.
  if (!empty($variables['items']['last']['href'])) {
    $last_link = [];
    $last_link['type'] = 'last';
    $last_link['aria_label'] = t('Go to last page');
    $label = t('Last ››');
    if (isset($tags[4])) {
      $label = $tags[4];
    }
    $last_link['link']['link'] = [
      'path' => $variables['items']['last']['href'],
      'label' => $label,
    ];
    $variables['ecl_items'][] = $last_link;
  }

}

/**
 * Implements hook_preprocess_links().
 */
function oe_theme_preprocess_links__language_block(array &$variables): void {
  $current_language_id = \Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();

  $variables['languages'] = [];
  $variables['current_language'] = [];
  foreach ($variables['links'] as $language_code => $link) {
    /** @var \Drupal\Core\Url $url */
    $url = $link['link']['#url'];
    $href = $url
      ->setOptions($link['link']['#options'])
      ->setAbsolute(TRUE)
      ->toString();

    // Get the language prefix.
    $lang_prefix = \Drupal::configFactory()
      ->get('language.negotiation')
      ->get('url.prefixes.' . $language_code);

    $variables['languages'][] = [
      'path' => $href,
      'hreflang' => $language_code,
      'label' => $link['link']['#title'],
      'lang' => $lang_prefix,
      'active' => $language_code === $current_language_id,
    ];

    if ($language_code === $current_language_id) {
      $variables['current_language'] = [
        'path' => $href,
        'hreflang' => $language_code,
        'label' => $link['link']['#title'],
        'lang' => $lang_prefix,
      ];
    }
  }
}

/**
 * Implements hook_preprocess_links__oe_multilingual_content_language_block().
 *
 * Adds extra variables regarding the current and the unavailable languages,
 * and prepares the links for rendering.
 */
function oe_theme_preprocess_links__oe_multilingual_content_language_block(array &$variables): void {
  $entity = \Drupal::service('oe_multilingual.helper')->getEntityFromCurrentRoute();
  /** @var \Drupal\Core\Entity\EntityInterface $translation */
  $translation = \Drupal::service('oe_multilingual.helper')->getCurrentLanguageEntityTranslation($entity);
  $variables['current'] = $translation->language()->getName();
  /** @var \Drupal\Core\Language\LanguageInterface[] $languages */
  $languages = \Drupal::service('language_manager')->getNativeLanguages();
  $current_language_id = \Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();
  $variables['unavailable'] = $languages[$current_language_id]->getName();

  // Normalize the links to an array of options suitable for the ECL
  // "ecl-lang-select-pages" template.
  $variables['options'] = [];
  foreach ($variables['links'] as $language_code => $link) {
    /** @var \Drupal\Core\Url $url */
    $url = $link['link']['#url'];
    $href = $url
      ->setOptions($link['link']['#options'])
      ->setAbsolute(TRUE)
      ->toString();

    // Get the language prefix.
    $lang_prefix = \Drupal::configFactory()
      ->get('language.negotiation')
      ->get('url.prefixes.' . $language_code);

    $variables['options'][] = [
      'href' => $href,
      'hreflang' => $language_code,
      'label' => $link['link']['#title'],
      'lang' => $lang_prefix,
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function oe_theme_preprocess_pattern_gallery__preview(array &$variables): void {
  foreach ($variables['items'] as &$item) {
    $item = GalleryItemValueObject::fromArray($item);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function oe_theme_preprocess_pattern_accordion(array &$variables): void {
  // If no identifier is provided generate a random, unique one.
  if (empty($variables['identifier'])) {
    $random = new Random();
    $variables['identifier'] = $random->string(8, TRUE);
  }

  // Format items in order to respect ECL expectations.
  foreach (array_values($variables['items']) as $key => $item) {
    $variables['items'][$key] = [
      'id' => $variables['identifier'] . '-' . $key,
      'toggle' => [
        'label' => $item['title'],
        'icon' => [
          'path' => $variables['ecl_icon_path'],
        ],
      ],
      'content' => $item['body'],
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function oe_theme_preprocess_pattern_banner_video(array &$variables): void {
  if (!empty($variables['video']['sources'])) {
    // We need to rename the variables that the Patterns module uses.
    foreach ($variables['video']['sources'] as &$source) {
      $source['type'] = $source['src_type'];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function oe_theme_preprocess_pattern_dropdown(array &$variables): void {
  $defaults = [
    'wrapper_id' => 'ecl-button-dropdown',
    'expandable_id' => 'expandable-ecl-button-dropdown',
    'button_id' => 'button-ecl-button-dropdown',
  ];

  foreach ($defaults as $key => $id) {
    if (!empty($variables[$key])) {
      continue;
    }

    $variables[$key] = Html::getUniqueId($id);
  }

  // @todo: Remove this duplicated code and reuse the link_block from below.
  foreach ($variables['links'] as $key => $link) {
    $variables['links'][$key]['href'] = $link['url'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function oe_theme_preprocess_pattern_link_block(array &$variables): void {
  // Format links in order to respect ECL expectations.
  foreach ($variables['links'] as $key => $link) {
    $variables['links'][$key]['href'] = $link['url'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function _oe_theme_preprocess_pattern_social_media_links(array &$variables): void {
  // Format social media links in order to respect ECL expectations.
  foreach ($variables['links'] as $key => $link) {
    $variables['links'][$key]['path'] = $link['url'];
    $variables['links'][$key]['icon_position'] = 'before';
    $variables['links'][$key]['icon'] = [
      [
        'path' => $variables['ecl_social_icon_path'],
        'name' => $link['service'],
        'size' => 'xl',
        'extra_classes' => 'ecl-social-media-follow__icon',
      ],
      [
        'path' => $variables['ecl_social_icon_path'],
        'name' => $link['service'] . '_hover',
        'size' => 'xl',
        'extra_classes' => 'ecl-social-media-follow__icon-hover',
      ],
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function oe_theme_preprocess_pattern_social_media_links_vertical(array &$variables): void {
  _oe_theme_preprocess_pattern_social_media_links($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function oe_theme_preprocess_pattern_social_media_links_horizontal(array &$variables): void {
  _oe_theme_preprocess_pattern_social_media_links($variables);
}

/**
 * Implements hook_preprocess_html() for html.html.twig.
 *
 * Add css class for splash page.
 */
function oe_theme_preprocess_html(array &$variables): void {
  if ('language_selection_page' === \Drupal::request()->attributes->get('_route')) {
    $variables['attributes']['class'][] = 'page-splash';
  }
}

/**
 * Implements hook_preprocess_paragraph() for paragraph--oe-list-item.html.twig.
 */
function oe_theme_preprocess_paragraph__oe_list_item(array &$variables): void {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  $list_item_variant = $paragraph->get('oe_paragraphs_variant')->first()->value;
  $variables['variant'] = $list_item_variant ?? 'default';
  $variables['url'] = $paragraph->get('field_oe_link')->first()->getUrl();

  $cacheability = CacheableMetadata::createFromRenderArray($variables);

  // Extract the image if present.
  if (!$paragraph->get('field_oe_image')->isEmpty()) {
    /** @var \Drupal\file\Plugin\Field\FieldType\FileItem $image_item */
    $image_item = $paragraph->get('field_oe_image')->first();
    $file = $image_item->get('entity')->getValue();
    $variables['image'] = [
      'src' => file_url_transform_relative(file_create_url($file->getFileUri())),
      'alt' => $image_item->get('alt')->getValue(),
    ];

    // Caches are handled by the formatter usually. Since we are not rendering
    // the original render arrays, we need to propagate our caches to the
    // paragraph template.
    $cacheability->addCacheableDependency($file);
  }

  // Prepare the date fields if date is available.
  if (!$paragraph->get('field_oe_date')->isEmpty()) {
    $variables['date'] = DateValueObject::fromDateTimeItem($paragraph->get('field_oe_date')->first());

    // Add the timezone context to the cache.
    // @see \Drupal\datetime\Plugin\Field\FieldFormatter\DateTimeFormatterBase::buildDate()
    $cacheability->addCacheContexts(['timezone']);
  }

  // Prepare the metas if available.
  if (!$paragraph->get('field_oe_meta')->isEmpty()) {
    $metas = [];
    foreach ($paragraph->get('field_oe_meta') as $item) {
      $metas[] = $item->value;
    }
    $variables['meta'] = $metas;
  }

  $cacheability->applyTo($variables);
}

/**
 * Implements hook_preprocess_paragraph() for paragraph--oe-list-item-block.html.twig.
 */
function oe_theme_preprocess_paragraph__oe_list_item_block(array &$variables): void {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  // Set up the correct variant name.
  $variables['variant'] = 'list_item_block_' . $paragraph->get('field_oe_list_item_block_layout')->first()->value;

  $variables['items'] = [];
  foreach ($variables['paragraph']->get('field_oe_paragraphs') as $delta => $item) {
    $variables['items'][] = $variables['content']['field_oe_paragraphs'][$delta];
  }

  // Prepare the button variables if a link has been specified.
  if ($paragraph->get('field_oe_link')->isEmpty()) {
    return;
  }

  /** @var \Drupal\link\Plugin\Field\FieldType\LinkItem $link_item */
  $link_item = $paragraph->get('field_oe_link')->first();
  $variables['button_url'] = $link_item->getUrl();
  $variables['button_label'] = $link_item->get('title')->getValue();
}

/**
 * Implements hook_preprocess_paragraph() for paragraph--oe-content-row--variant-inpage_navigation.html.twig.
 *
 * Prepares the inpage navigation by creating links for the inner paragraphs
 * that implement a title.
 */
function oe_theme_preprocess_paragraph__oe_content_row__variant_inpage_navigation(array &$variables): void {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  if ($paragraph->get('field_oe_paragraphs')->isEmpty()) {
    return;
  }

  // Add default fallback title for inpage naviagtion.
  $variables['title'] = t('Page contents');
  if (!$paragraph->get('field_oe_title')->isEmpty()) {
    $variables['title'] = $paragraph->get('field_oe_title')->value;
  }

  // Create a shortcut to the render array for the field.
  $field_render = &$variables['content']['field_oe_paragraphs'];
  $links = [];
  foreach ($paragraph->get('field_oe_paragraphs')->referencedEntities() as $delta => $sub_paragraph) {
    /** @var \Drupal\paragraphs\Entity\Paragraph $sub_paragraph */
    if (!$sub_paragraph->hasField('field_oe_title') || $sub_paragraph->get('field_oe_title')->isEmpty()) {
      continue;
    }

    $unique_id = Html::getUniqueId('ecl-inpage-' . $sub_paragraph->id());
    // Wrap the paragraph in a div with a specific id set as anchor.
    $field_render[$delta]['#theme_wrappers']['container'] = [
      '#attributes' => ['id' => $unique_id],
    ];

    // Get sub-paragraph translation.
    $sub_paragraph = \Drupal::service('entity.repository')
      ->getTranslationFromContext($sub_paragraph, $paragraph->language()->getId());

    // Add a link pointing to the paragraph.
    $links[] = [
      'href' => '#' . $unique_id,
      'label' => $sub_paragraph->get('field_oe_title')->first()->value,
    ];
  }

  $variables['links'] = $links;
}

/**
 * Implements hook_preprocess_pattern().
 */
function oe_theme_preprocess_pattern_date_block(array &$variables): void {
  // This make sure that the variant value will always fallback to
  // "default" if an empty or not valid value is passed.
  $variants = [
    'default',
    'ongoing',
    'cancelled',
    'past',
  ];

  $variables['variant'] = in_array($variables['variant'], $variants, TRUE) ?
    $variables['variant'] :
    'default';
}

/**
 * Implements hook_preprocess_pattern_file__preview().
 */
function oe_theme_preprocess_pattern_file__preview(array &$variables): void {
  $variables['file'] = FileValueObject::fromArray($variables['file']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function oe_theme_preprocess_pattern_file_translation__preview(array &$variables): void {
  $variables['file'] = FileValueObject::fromArray($variables['file']);

  foreach ((array) $variables['translations'] as $index => $translation) {
    $variables['translations'][$index] = FileValueObject::fromArray($translation);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function oe_theme_preprocess_pattern_list_item__variant_date__preview(array &$variables): void {
  $variables['date'] = DateValueObject::fromArray($variables['date']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function oe_theme_preprocess_pattern_date_block__preview(array &$variables): void {
  $variables['date'] = DateValueObject::fromArray($variables['date']);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function oe_theme_theme_suggestions_form_alter(array &$suggestions, array $variables): void {
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['element']['#form_id'];
}

/**
 * Implements hook_preprocess_input().
 */
function oe_theme_preprocess_input__search(array &$variables): void {
  $variables['input_array'] = _oe_theme_preprocess_search_input_text($variables['element']);
}

/**
 * Implements hook_preprocess_form().
 */
function oe_theme_preprocess_form__oe_search_search_form(array &$variables): void {
  $variables['input_array'] = _oe_theme_preprocess_search_input_text($variables['element']['keys']);
  $variables['input_array']['hide_label'] = TRUE;
  $variables['label'] = $variables['input_array']['label'] = t('Search');
}

/**
 * Helper function to additionally preprocess textfield search elements.
 *
 * Moves the label element to the input template and creates some helper
 * variables to be used with the ECL templates.
 *
 * @param array $element
 *   Set of element data.
 *
 * @return array
 *   The ECL array for the input element.
 */
function _oe_theme_preprocess_search_input_text(array $element): array {
  // Process element attributes into an ecl input array.
  $ecl_array = [
    'id' => $element['#attributes']['id'],
    'name' => $element['#attributes']['name'],
    'disabled' => isset($element['#attributes']['disabled']) ? $element['#attributes']['disabled'] : FALSE,
    'type' => $element['#attributes']['type'],
    'class' => $element['#attributes']['class'],
  ];
  $ecl_array['class'][] = 'ecl-search-form__text-input';

  $extra_attributes = !empty($element['#attributes']) ? $element['#attributes'] : [];
  $extra_attributes = array_diff_key($extra_attributes, $ecl_array);
  $ecl_array['extra_attributes'] = [];
  foreach ($extra_attributes as $key => $value) {
    if (is_string($value)) {
      $ecl_array['extra_attributes'][] = [
        'name' => $key,
        'value' => $value,
      ];
    }
  }
  // Map rest of the array elements.
  $ecl_array['invalid'] = !empty($element['#errors']);
  return $ecl_array;
}

/**
 * Implements template_preprocess_responsive_image_formatter().
 *
 * For all responsive images, we need to set the ECL image classes.
 */
function oe_theme_preprocess_responsive_image_formatter(&$variables) {
  $variables['responsive_image']['#attributes']['class'][] = 'ecl-image';
  $variables['responsive_image']['#attributes']['class'][] = 'ecl-image--fluid';
}

/**
 * Implements template_preprocess_preprocess_block().
 *
 * For preprocessing default mode of document media type.
 */
function oe_theme_preprocess_block(&$variables) {
  $variables['title_attributes'] = array_merge_recursive($variables['title_attributes'], [
    'class' => [
      'ecl-u-type-heading-2',
    ],
  ]);
}

/**
 * Implements template_preprocess_block__system_branding_block().
 *
 * Add required variables to follow ECL guidelines.
 */
function oe_theme_preprocess_block__system_branding_block(&$variables) {
  /** @var \Drupal\Core\Language\LanguageInterface[] $languages */
  $languages = \Drupal::service('language_manager')->getNativeLanguages();
  $current_language_id = \Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();

  // Get the language prefix.
  $lang_prefix = \Drupal::configFactory()
    ->get('language.negotiation')
    ->get('url.prefixes.' . $current_language_id);

  $variables['site_logo'] = $variables['ecl_logo_path'] . '/logo--' . $lang_prefix . '.svg';

  $variables['site_logo_alt'] = !empty($variables['site_name']) ?
    t('@site_name logo', ['@site_name' => $variables['site_name']]) :
    '';

  $route_options = ['absolute' => TRUE];
  $variables['site_logo_href'] = Url::fromRoute('<front>', [], $route_options)->toString();
}

/**
 * Implements template_preprocess_preprocess_media__document__default().
 *
 * For preprocessing default mode of document media type.
 */
function oe_theme_preprocess_media__document__default(&$variables) {
  if (!$variables['media']->get('oe_media_file')->isEmpty()) {
    $file_object = $variables['media']->get('oe_media_file')->first()->entity;
    $variables['file'] = FileValueObject::fromFileEntity($file_object);
  }
}

/**
 * Implements hook_preprocess_pattern_timeline().
 */
function oe_theme_preprocess_pattern_timeline(array &$variables): void {
  foreach ($variables['items'] as &$item) {
    $item['content'] = $item['body'];
  }
}

/*
 * Implements template_preprocess_language_selection_page_content().
 */
function oe_theme_preprocess_language_selection_page_content(&$variables) {
  if (!empty($variables['languages'])) {
    foreach ($variables['languages'] as &$language) {
      $language['path'] = $language['href'];
      unset($language['href']);
      unset($language['hreflang']);
      $language['active'] = \Drupal::languageManager()->getCurrentLanguage()->getId() === $language['lang'];

    }
  }
  $variables['logo'] = [
    'alt' => t('European Commission logo'),
    'path' => $variables['ecl_logo_path'] . '/logo--mute.svg',
  ];
}
